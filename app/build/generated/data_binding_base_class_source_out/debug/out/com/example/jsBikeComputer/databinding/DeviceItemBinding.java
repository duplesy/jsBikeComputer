// Generated by view binder compiler. Do not edit!
package com.example.jsBikeComputer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.jsBikeComputer.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DeviceItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView deviceAddress;

  @NonNull
  public final LinearLayout deviceItem;

  @NonNull
  public final TextView deviceName;

  @NonNull
  public final TextView rssiText;

  @NonNull
  public final ImageView signalIcon;

  @NonNull
  public final ProgressBar signalStrength;

  private DeviceItemBinding(@NonNull LinearLayout rootView, @NonNull TextView deviceAddress,
      @NonNull LinearLayout deviceItem, @NonNull TextView deviceName, @NonNull TextView rssiText,
      @NonNull ImageView signalIcon, @NonNull ProgressBar signalStrength) {
    this.rootView = rootView;
    this.deviceAddress = deviceAddress;
    this.deviceItem = deviceItem;
    this.deviceName = deviceName;
    this.rssiText = rssiText;
    this.signalIcon = signalIcon;
    this.signalStrength = signalStrength;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DeviceItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DeviceItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.device_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DeviceItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.device_address;
      TextView deviceAddress = ViewBindings.findChildViewById(rootView, id);
      if (deviceAddress == null) {
        break missingId;
      }

      LinearLayout deviceItem = (LinearLayout) rootView;

      id = R.id.device_name;
      TextView deviceName = ViewBindings.findChildViewById(rootView, id);
      if (deviceName == null) {
        break missingId;
      }

      id = R.id.rssi_text;
      TextView rssiText = ViewBindings.findChildViewById(rootView, id);
      if (rssiText == null) {
        break missingId;
      }

      id = R.id.signal_icon;
      ImageView signalIcon = ViewBindings.findChildViewById(rootView, id);
      if (signalIcon == null) {
        break missingId;
      }

      id = R.id.signal_strength;
      ProgressBar signalStrength = ViewBindings.findChildViewById(rootView, id);
      if (signalStrength == null) {
        break missingId;
      }

      return new DeviceItemBinding((LinearLayout) rootView, deviceAddress, deviceItem, deviceName,
          rssiText, signalIcon, signalStrength);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
